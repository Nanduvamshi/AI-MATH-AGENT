# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10uET2OxwM_JkImWaqsh2ozdKejS0rqwz
"""

# prompt: mount drive

from google.colab import drive
drive.mount('/content/drive')

!pip install langchain langchain_community langchain_core llama-index weaviate-client qdrant-client dspy exa transformers datasets evaluate

import numpy as np
import pandas as pd
import torch
# LangChain updated imports
from langchain_community.document_loaders import TextLoader
from langchain_community.vectorstores import FAISS, Chroma
from langchain_core.prompts import PromptTemplate
from langchain_core.runnables import ConfigurableField
from langchain.text_splitter import RecursiveCharacterTextSplitter, CharacterTextSplitter
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Qdrant
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain.llms import HuggingFaceHub
import weaviate
import os

mathQSATrainFile = r"/content/train.csv"
mathQSATestFile = r"/content/test.csv"
gsm8ktrain = r"/content/train-00000-of-00001.parquet"
gsm8ktest = r"/content/test-00000-of-00001.parquet"
mathQAtrain = r"/content/train.json"
mathQAtest = r"/content/test.json"
orcamath = r"/content/200k.parquet"

#gsm8k
gsm8k_train = pd.read_parquet(f"{gsm8ktrain}")
gsm8k_test = pd.read_parquet(f"{gsm8ktest}")
#Mathqsa
mathqsa_train = pd.read_csv(f"{mathQSATrainFile}")
mathqsa_test = pd.read_csv(f"{mathQSATestFile}")
# MathQA
import json
with open(f"{mathQAtrain}") as f:
    mathqa_train = pd.DataFrame(json.load(f))
with open(f"{mathQAtest}") as f:
    mathqa_test = pd.DataFrame(json.load(f))
# Orca Math
orca_train = pd.read_parquet(r"/content/200k.parquet")

all_train_df = pd.concat([
    gsm8k_train.rename(columns={"question": "question", "answer": "answer"}),
    mathqsa_train.rename(columns={"question": "question", "answer": "answer"}),
    mathqa_train.rename(columns={"Problem": "question", "Rationale": "answer"}),
    orca_train.rename(columns={"question": "question", "answer": "answer"})
], ignore_index=True)

all_train_df.dropna(subset=["question", "answer"], inplace=True)

text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
documents = text_splitter.create_documents(
    [f"Q: {row['question']}\nA: {row['answer']}" for _, row in all_train_df.iterrows()]
)

embeddings = HuggingFaceEmbeddings()
vectorstore = Qdrant.from_documents(documents, embeddings, location=":memory:", collection_name="math_qa")

retriever = vectorstore.as_retriever()
llm = HuggingFaceHub(repo_id="google/flan-t5-large")
qa_chain = RetrievalQA.from_chain_type(llm=llm, retriever=retriever)

import exa
exa.api_key = os.getenv("63ee70aa-00ac-4b6d-be9b-a5e4fb645c24")
def web_search_fallback(query):
    results = exa.search(query, num_results=3)
    return "\n".join([r.snippet for r in results.results])

from dspy import Chain
class MathAgent(Chain):
    def forward(self, question):
        answer = qa_chain.run(question)
        if not answer or len(answer.strip()) < 10:
            web_context = web_search_fallback(question)
            answer = f"[Web Search Result]\n{web_context}"
        return answer

def feedback_loop(question):
    answer = math_agent.forward(question)
    print("\nAnswer:\n", answer)
    fb = input("Is the answer correct? (yes/no): ")
    if fb.lower() == "no":
        correction = input("Please provide the correct answer: ")
        # Append correction to training data (simulate)
        all_train_df.loc[len(all_train_df)] = {"question": question, "answer": correction}
        print("Feedback received. Will incorporate into next training.")
    else:
        print("Great! Feedback noted.")

math_agent = MathAgent()
feedback_loop("What is the derivative of x^2?")